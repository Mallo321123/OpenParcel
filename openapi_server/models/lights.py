from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.groups import Groups
from openapi_server import util

from openapi_server.models.groups import Groups  # noqa: E501

class Lights(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, groups=None, adress=None, note=None, online=None):  # noqa: E501
        """Lights - a model defined in OpenAPI

        :param id: The id of this Lights.  # noqa: E501
        :type id: int
        :param groups: The groups of this Lights.  # noqa: E501
        :type groups: Groups
        :param adress: The adress of this Lights.  # noqa: E501
        :type adress: str
        :param note: The note of this Lights.  # noqa: E501
        :type note: str
        :param online: The online of this Lights.  # noqa: E501
        :type online: int
        """
        self.openapi_types = {
            'id': int,
            'groups': Groups,
            'adress': str,
            'note': str,
            'online': int
        }

        self.attribute_map = {
            'id': 'id',
            'groups': 'groups',
            'adress': 'adress',
            'note': 'note',
            'online': 'online'
        }

        self._id = id
        self._groups = groups
        self._adress = adress
        self._note = note
        self._online = online

    @classmethod
    def from_dict(cls, dikt) -> 'Lights':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Lights of this Lights.  # noqa: E501
        :rtype: Lights
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this Lights.


        :return: The id of this Lights.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Lights.


        :param id: The id of this Lights.
        :type id: int
        """

        self._id = id

    @property
    def groups(self) -> Groups:
        """Gets the groups of this Lights.


        :return: The groups of this Lights.
        :rtype: Groups
        """
        return self._groups

    @groups.setter
    def groups(self, groups: Groups):
        """Sets the groups of this Lights.


        :param groups: The groups of this Lights.
        :type groups: Groups
        """

        self._groups = groups

    @property
    def adress(self) -> str:
        """Gets the adress of this Lights.


        :return: The adress of this Lights.
        :rtype: str
        """
        return self._adress

    @adress.setter
    def adress(self, adress: str):
        """Sets the adress of this Lights.


        :param adress: The adress of this Lights.
        :type adress: str
        """

        self._adress = adress

    @property
    def note(self) -> str:
        """Gets the note of this Lights.


        :return: The note of this Lights.
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note: str):
        """Sets the note of this Lights.


        :param note: The note of this Lights.
        :type note: str
        """

        self._note = note

    @property
    def online(self) -> int:
        """Gets the online of this Lights.


        :return: The online of this Lights.
        :rtype: int
        """
        return self._online

    @online.setter
    def online(self, online: int):
        """Sets the online of this Lights.


        :param online: The online of this Lights.
        :type online: int
        """
        allowed_values = [1, 0]  # noqa: E501
        if online not in allowed_values:
            raise ValueError(
                "Invalid value for `online` ({0}), must be one of {1}"
                .format(online, allowed_values)
            )

        self._online = online
