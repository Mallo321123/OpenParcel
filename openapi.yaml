openapi: 3.0.3
info:
  title: OpenParcel
  description: Manages outgoing packages for small online shops
  termsOfService: http://swagger.io/terms/
  contact:
    email: mario@binary-kitchen.de
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 0.1.0
servers:
  - url: http://127.0.0.1/api
tags:
  - name: dashboard
  - name: settings
  - name: orders
  - name: products
  - name: lights
  - name: user
    description: Operations about user
paths:
  /settings:
    get:
      tags:
        - settings
      summary: display settings
      description: list all current settings states
      operationId: settingsList
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Settings'
        '401':
          description: Unathorized
    put:
      tags:
        - settings
      summary: update settings
      description: updates settings
      operationId: settingsUpdate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Settings'
        required: true
      responses:
        '200':
          description: Successful operation
        '401':
          description: Unathorized
  /dashboard:
    get:
      tags:
        - dashboard
      summary: list dashboard information
      description: lists dashboard information
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Dashboard'
        '401':
          description: Unathorized
  /orders:
    get:
      tags:
        - orders
      summary: list all orders
      description: lists all orders
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Orders'
        '401':
          description: Unathorized
    post:
      tags:
        - orders
      summary: add an order
      description: adds an order
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Orders'
      responses:
        '200':
          description: successful operation
        '401':
          description: Unathorized
    put:
      tags:
        - orders
      summary: update an order
      description: updates an order
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Orders'
      responses:
        '200':
          description: successful operation
        '401':
          description: Unathorized
    delete:
      tags:
        - orders
      summary: delete a order
      description: deletes a order
      parameters:
        - name: id
          in: query
          description: The order that needs to be deleted
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: succesfull operation
        '400':
          description: Invalid id supplied
        '404':
          description: order not found
  /products:
    get:
      tags:
        - products
      summary: list of products
      description: lists all avaiable products
      operationId: productsList
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Products'
        '401':
          description: Unathorized
    post:
      tags:
        - products
      summary: add a product
      description: adds a product
      operationId: productAdd
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Products'
      responses:
        '200':
          description: successful operation
        '401':
          description: Unathorized
    put:
      tags:
        - products
      summary: update product
      description: updates product properties
      operationId: updateProduct
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Products'
      responses:
        '200':
          description: successful operation
        '401':
          description: Unathorized
    delete:
      tags:
        - products
      summary: delete a product
      description: deletes a product
      parameters:
        - name: id
          in: query
          description: The product that needs to be deleted
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: succesfull operation
        '400':
          description: Invalid id supplied
        '404':
          description: product not found
  /lights/group:
    post:
      tags:
        - lights
      summary: add light group
      description: adds a new Light group
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Groups'
        required: true
      responses:
        '200':
          description: Successful operation
        '401':
          description: Unathorized
    get:
      tags:
        - lights
      summary: list all light groups
      description: returns all light groups
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Groups'
        '401':
          description: Unathorized
    delete:
      tags:
        - lights
      summary: delete a light group
      description: deletes a light grouo
      parameters:
        - name: id
          in: query
          description: The group that needs to be deleted
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: succesfull operation
        '400':
          description: Invalid id supplied
        '404':
          description: group not found
  /lights/devices:
    post:
      tags:
        - lights
      summary: add light device
      description: adds a new Light device
      operationId: lightAdd
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Lights'
        required: true
      responses:
        '200':
          description: Successful operation
        '401':
          description: Unathorized
    get:
      tags:
        - lights
      summary: list lights
      description: list all light devices
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Lights'
        '401':
          description: Unathorized
    put:
      tags:
        - lights
      summary: change light device
      description: change a Light device
      operationId: lightChange
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Lights'
        required: true
      responses:
        '200':
          description: Successful operation
        '401':
          description: Unathorized
    delete:
      tags:
        - lights
      summary: delete a light
      description: deletes a light
      parameters:
        - name: id
          in: query
          description: The light that needs to be deleted
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: succesfull operation
        '400':
          description: Invalid id supplied
        '404':
          description: light not found
  /lights/map:
    post:
      tags:
        - lights
      summary: add a light - product mapping
      description: map a light to a product
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Map'
        required: true
      responses:
        '200':
          description: Successful operation
        '401':
          description: Unathorized
    get:
      tags:
        - lights
      summary: list all mappings
      description: lists all mappings
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Map'
        '401':
          description: Unathorized
    put:
      tags:
        - lights
      summary: change a light - product mapping
      description: change a mapping
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Map'
        required: true
      responses:
        '200':
          description: Successful operation
        '401':
          description: Unathorized
    delete:
      tags:
        - lights
      summary: delete a mapper
      description: deletes a mapper
      parameters:
        - name: id
          in: query
          description: The mapper that needs to be deleted
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: succesfull operation
        '400':
          description: Invalid id supplied
        '404':
          description: mapper not found
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      security: []
      
    get:
      tags:
        - user
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      parameters:
        - name: username
          in: query
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: query
          description: name of user that needs to be changed
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: query
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
  /user/list:
    get:
      tags:
        - user
      summary: list users
      description: list all users
      responses:
        '200':
          description: succesfull operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /user/login:
    post:
      tags:
        - user
      summary: User Login
      description: Authenticates a user and returns a JWT token.
      operationId: security_controller.login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
              required:
                - username
                - password
      responses:
        '200':
          description: Successfully authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        '401':
          description: Invalid credentials
      security: []
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: successful operation
components:
  schemas:
    Settings:
      type: object
      properties:
        minPasswordLength:
          type: integer
          format: int64
          example: 5
    Dashboard:
      type: object
      properties:
        open:
          description: count of open orders
          type: integer
          example: 23
        done:
          description: count of completed orders
          type: integer
          example: 420
        products:
          description: count of avaiable products
          type: integer
          example: 15
        lights:
          type: integer
          example: 10
        mappers:
          type: integer
          example: 10
    Orders:
      type: object
      properties:
        id:
          type: integer
          example: 5610
        customer:
          type: string
          example: Max Mustermann
        products:
          type: array
          items:
            $ref: '#/components/schemas/Products'
        state:
          type: string
          example: open
          enum:
            - open
            - in work
            - hold
            - closed
        dateAdd:
          type: string
          example: 2024-12-19T20:35:19.772Z
        dateClosed:
          type: string
          example: 2024-12-19T20:35:19.772Z
    User:
      type: object
      properties:
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        userStatus:
          type: integer
          description: User Status
          format: int32
          example: 1
        userGroups:
          type: array
          items:
            type: string
            example:
              - admin
              - products
              - users
              - lights
              - statistics
    Products:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: openDTU
        comment:
          type: string
          example: example comment
        difficulty:
          type: integer
          example: 3
          enum:
            - 1
            - 2
            - 3
            - 4
            - 5
        buildTime:
          type: string
          example: 20-30 min
        customerGroups:
          type: array
          items:
            type: string
            example:
              - adults
              - teens
              - kids
              - nerds
    Groups:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: regal rechts
    Lights:
      type: object
      properties:
        id:
          type: integer
          example: 1
        groups:
          $ref: '#/components/schemas/Groups'
        adress:
          type: string
          example: wled1.local
        note:
          type: string
          example: example note
        online:
          type: integer
          example: 1
          enum:
            - 1
            - 0
    Map:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: blinky
        productId:
          type: array
          items:
            type: integer
            example: 10
        lightId:
          type: array
          items:
            type: integer
            example: 5
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
security:
  - BearerAuth: []