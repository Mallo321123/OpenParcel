from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.order_products import OrderProducts
import re
from openapi_server import util

from openapi_server.models.order_products import OrderProducts  # noqa: E501
import re  # noqa: E501

class OrdersChange(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, customer=None, products=None, state=None, date_add=None, date_closed=None, comment=None, shipment_type=None):  # noqa: E501
        """OrdersChange - a model defined in OpenAPI

        :param customer: The customer of this OrdersChange.  # noqa: E501
        :type customer: str
        :param products: The products of this OrdersChange.  # noqa: E501
        :type products: List[OrderProducts]
        :param state: The state of this OrdersChange.  # noqa: E501
        :type state: str
        :param date_add: The date_add of this OrdersChange.  # noqa: E501
        :type date_add: str
        :param date_closed: The date_closed of this OrdersChange.  # noqa: E501
        :type date_closed: str
        :param comment: The comment of this OrdersChange.  # noqa: E501
        :type comment: str
        :param shipment_type: The shipment_type of this OrdersChange.  # noqa: E501
        :type shipment_type: str
        """
        self.openapi_types = {
            'customer': str,
            'products': List[OrderProducts],
            'state': str,
            'date_add': str,
            'date_closed': str,
            'comment': str,
            'shipment_type': str
        }

        self.attribute_map = {
            'customer': 'customer',
            'products': 'products',
            'state': 'state',
            'date_add': 'dateAdd',
            'date_closed': 'dateClosed',
            'comment': 'comment',
            'shipment_type': 'shipmentType'
        }

        self._customer = customer
        self._products = products
        self._state = state
        self._date_add = date_add
        self._date_closed = date_closed
        self._comment = comment
        self._shipment_type = shipment_type

    @classmethod
    def from_dict(cls, dikt) -> 'OrdersChange':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Orders_change of this OrdersChange.  # noqa: E501
        :rtype: OrdersChange
        """
        return util.deserialize_model(dikt, cls)

    @property
    def customer(self) -> str:
        """Gets the customer of this OrdersChange.


        :return: The customer of this OrdersChange.
        :rtype: str
        """
        return self._customer

    @customer.setter
    def customer(self, customer: str):
        """Sets the customer of this OrdersChange.


        :param customer: The customer of this OrdersChange.
        :type customer: str
        """
        if customer is not None and len(customer) > 255:
            raise ValueError("Invalid value for `customer`, length must be less than or equal to `255`")  # noqa: E501

        self._customer = customer

    @property
    def products(self) -> List[OrderProducts]:
        """Gets the products of this OrdersChange.


        :return: The products of this OrdersChange.
        :rtype: List[OrderProducts]
        """
        return self._products

    @products.setter
    def products(self, products: List[OrderProducts]):
        """Sets the products of this OrdersChange.


        :param products: The products of this OrdersChange.
        :type products: List[OrderProducts]
        """
        if products is not None and len(products) > 255:
            raise ValueError("Invalid value for `products`, number of items must be less than or equal to `255`")  # noqa: E501

        self._products = products

    @property
    def state(self) -> str:
        """Gets the state of this OrdersChange.


        :return: The state of this OrdersChange.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state: str):
        """Sets the state of this OrdersChange.


        :param state: The state of this OrdersChange.
        :type state: str
        """
        allowed_values = ["open", "working", "hold", "closed"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def date_add(self) -> str:
        """Gets the date_add of this OrdersChange.


        :return: The date_add of this OrdersChange.
        :rtype: str
        """
        return self._date_add

    @date_add.setter
    def date_add(self, date_add: str):
        """Sets the date_add of this OrdersChange.


        :param date_add: The date_add of this OrdersChange.
        :type date_add: str
        """
        if date_add is not None and len(date_add) > 255:
            raise ValueError("Invalid value for `date_add`, length must be less than or equal to `255`")  # noqa: E501

        self._date_add = date_add

    @property
    def date_closed(self) -> str:
        """Gets the date_closed of this OrdersChange.


        :return: The date_closed of this OrdersChange.
        :rtype: str
        """
        return self._date_closed

    @date_closed.setter
    def date_closed(self, date_closed: str):
        """Sets the date_closed of this OrdersChange.


        :param date_closed: The date_closed of this OrdersChange.
        :type date_closed: str
        """
        if date_closed is not None and len(date_closed) > 255:
            raise ValueError("Invalid value for `date_closed`, length must be less than or equal to `255`")  # noqa: E501

        self._date_closed = date_closed

    @property
    def comment(self) -> str:
        """Gets the comment of this OrdersChange.


        :return: The comment of this OrdersChange.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment: str):
        """Sets the comment of this OrdersChange.


        :param comment: The comment of this OrdersChange.
        :type comment: str
        """
        if comment is not None and len(comment) > 255:
            raise ValueError("Invalid value for `comment`, length must be less than or equal to `255`")  # noqa: E501

        self._comment = comment

    @property
    def shipment_type(self) -> str:
        """Gets the shipment_type of this OrdersChange.


        :return: The shipment_type of this OrdersChange.
        :rtype: str
        """
        return self._shipment_type

    @shipment_type.setter
    def shipment_type(self, shipment_type: str):
        """Sets the shipment_type of this OrdersChange.


        :param shipment_type: The shipment_type of this OrdersChange.
        :type shipment_type: str
        """
        if shipment_type is not None and len(shipment_type) > 255:
            raise ValueError("Invalid value for `shipment_type`, length must be less than or equal to `255`")  # noqa: E501

        self._shipment_type = shipment_type
