from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class Lights(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, groups=None, adress=None, comment=None):  # noqa: E501
        """Lights - a model defined in OpenAPI

        :param groups: The groups of this Lights.  # noqa: E501
        :type groups: List[str]
        :param adress: The adress of this Lights.  # noqa: E501
        :type adress: str
        :param comment: The comment of this Lights.  # noqa: E501
        :type comment: str
        """
        self.openapi_types = {
            'groups': List[str],
            'adress': str,
            'comment': str
        }

        self.attribute_map = {
            'groups': 'groups',
            'adress': 'adress',
            'comment': 'comment'
        }

        self._groups = groups
        self._adress = adress
        self._comment = comment

    @classmethod
    def from_dict(cls, dikt) -> 'Lights':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Lights of this Lights.  # noqa: E501
        :rtype: Lights
        """
        return util.deserialize_model(dikt, cls)

    @property
    def groups(self) -> List[str]:
        """Gets the groups of this Lights.


        :return: The groups of this Lights.
        :rtype: List[str]
        """
        return self._groups

    @groups.setter
    def groups(self, groups: List[str]):
        """Sets the groups of this Lights.


        :param groups: The groups of this Lights.
        :type groups: List[str]
        """
        if groups is not None and len(groups) > 100:
            raise ValueError("Invalid value for `groups`, number of items must be less than or equal to `100`")  # noqa: E501

        self._groups = groups

    @property
    def adress(self) -> str:
        """Gets the adress of this Lights.


        :return: The adress of this Lights.
        :rtype: str
        """
        return self._adress

    @adress.setter
    def adress(self, adress: str):
        """Sets the adress of this Lights.


        :param adress: The adress of this Lights.
        :type adress: str
        """
        if adress is not None and len(adress) > 255:
            raise ValueError("Invalid value for `adress`, length must be less than or equal to `255`")  # noqa: E501

        self._adress = adress

    @property
    def comment(self) -> str:
        """Gets the comment of this Lights.


        :return: The comment of this Lights.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment: str):
        """Sets the comment of this Lights.


        :param comment: The comment of this Lights.
        :type comment: str
        """
        if comment is not None and len(comment) > 65535:
            raise ValueError("Invalid value for `comment`, length must be less than or equal to `65535`")  # noqa: E501

        self._comment = comment
