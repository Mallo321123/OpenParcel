from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.products_response_item import ProductsResponseItem
from openapi_server import util

from openapi_server.models.products_response_item import ProductsResponseItem  # noqa: E501

class ProductsResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, total_items=None, items=None):  # noqa: E501
        """ProductsResponse - a model defined in OpenAPI

        :param total_items: The total_items of this ProductsResponse.  # noqa: E501
        :type total_items: int
        :param items: The items of this ProductsResponse.  # noqa: E501
        :type items: List[ProductsResponseItem]
        """
        self.openapi_types = {
            'total_items': int,
            'items': List[ProductsResponseItem]
        }

        self.attribute_map = {
            'total_items': 'totalItems',
            'items': 'items'
        }

        self._total_items = total_items
        self._items = items

    @classmethod
    def from_dict(cls, dikt) -> 'ProductsResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Products_response of this ProductsResponse.  # noqa: E501
        :rtype: ProductsResponse
        """
        return util.deserialize_model(dikt, cls)

    @property
    def total_items(self) -> int:
        """Gets the total_items of this ProductsResponse.


        :return: The total_items of this ProductsResponse.
        :rtype: int
        """
        return self._total_items

    @total_items.setter
    def total_items(self, total_items: int):
        """Sets the total_items of this ProductsResponse.


        :param total_items: The total_items of this ProductsResponse.
        :type total_items: int
        """
        if total_items is not None and total_items > 2147483647:  # noqa: E501
            raise ValueError("Invalid value for `total_items`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if total_items is not None and total_items < 0:  # noqa: E501
            raise ValueError("Invalid value for `total_items`, must be a value greater than or equal to `0`")  # noqa: E501

        self._total_items = total_items

    @property
    def items(self) -> List[ProductsResponseItem]:
        """Gets the items of this ProductsResponse.


        :return: The items of this ProductsResponse.
        :rtype: List[ProductsResponseItem]
        """
        return self._items

    @items.setter
    def items(self, items: List[ProductsResponseItem]):
        """Sets the items of this ProductsResponse.


        :param items: The items of this ProductsResponse.
        :type items: List[ProductsResponseItem]
        """
        if items is not None and len(items) > 200:
            raise ValueError("Invalid value for `items`, number of items must be less than or equal to `200`")  # noqa: E501

        self._items = items
